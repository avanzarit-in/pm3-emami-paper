package com.avanzarit.solutions.report.reportgenerator.auth;

import org.apache.commons.codec.binary.Base64;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.MessageDigest;
import java.security.Signature;
import java.security.cert.Certificate;
import java.util.Enumeration;

/**
 * Simple JWT processor. This is specially written for JWT generated by WSO2IS
 */
public class SimpleJWTProcessor {

    private static final Base64 base64Url = new Base64(true);

    private static final String trustStore = "/trust-store/client-truststore.jks" ;

    private static final String trustStorePassword = "wso2carbon";

    private JSONObject jsonHeaderObject;

    private JSONObject jsonClaimObject;

    private String jwtToken;

    public SimpleJWTProcessor(String jwtToken) {
        this.jwtToken = jwtToken;
    }

    protected boolean isValid(){

        String[] jwtTokenValues = jwtToken.split("\\.");
        String jwtAssertion = null;
        byte[] jwtSignature = null;

        if(jwtTokenValues.length > 0){
            String value = new String(base64Url.decode(jwtTokenValues[0].getBytes()));
            System.out.println("JWT Header : " + value);

            JSONParser parser = new JSONParser();
            try {
                jsonHeaderObject = (JSONObject) parser.parse(value);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if(jwtTokenValues.length > 1){

            String value = new String(base64Url.decode(jwtTokenValues[1].getBytes()));
            System.out.println("JWT Body : " + value);
            jwtAssertion = jwtTokenValues[0] + "." + jwtTokenValues[1];

            JSONParser parser = new JSONParser();
            try {
                jsonClaimObject = (JSONObject) parser.parse(value);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if(jwtTokenValues.length > 2){
            jwtSignature = base64Url.decode(jwtTokenValues[2].getBytes());
        }

        KeyStore keyStore = null;
        String thumbPrint = new String(base64Url.decode(((String) jsonHeaderObject.get("kid")).getBytes()));
        String signatureAlgo = (String) jsonHeaderObject.get("alg");

        if("RS256".equals(signatureAlgo)){
            signatureAlgo = "SHA256withRSA";
        } else if("RS515".equals(signatureAlgo)){
            signatureAlgo = "SHA512withRSA";
        } else if("RS384".equals(signatureAlgo)){
            signatureAlgo = "SHA384withRSA";
        } else {
            // by default
            signatureAlgo = "SHA256withRSA";
        }

        if(jwtAssertion != null && jwtSignature != null) {

            try {
                keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
                keyStore.load(new FileInputStream(trustStore), trustStorePassword.toCharArray());
                String alias = getAliasForX509CertThumb(thumbPrint.getBytes(), keyStore);
                Certificate certificate = keyStore.getCertificate(alias);
                Signature signature = Signature.getInstance(signatureAlgo);
                signature.initVerify(certificate);
                signature.update(jwtAssertion.getBytes());
                return signature.verify(jwtSignature);


            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.err.println("Signature is null");
        }
        return false;

    }

    private String getAliasForX509CertThumb(byte[] thumb, KeyStore keyStore) {

        Certificate cert = null;
        MessageDigest sha = null;

        try {
            sha = MessageDigest.getInstance("SHA-1");
            for (Enumeration e = keyStore.aliases(); e.hasMoreElements();) {
                String alias = (String) e.nextElement();
                Certificate[] certs = keyStore.getCertificateChain(alias);
                if (certs == null || certs.length == 0) {
                    cert = keyStore.getCertificate(alias);
                    if (cert == null) {
                        return null;
                    }
                } else {
                    cert = certs[0];
                }
                sha.update(cert.getEncoded());
                byte[] data = sha.digest();
                if (new String(thumb).equals(hexify(data))) {
                    return alias;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private String hexify(byte bytes[]) {

        char[] hexDigits =
                { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd',
                        'e', 'f' };

        StringBuilder buf = new StringBuilder(bytes.length * 2);

        for (byte aByte : bytes) {
            buf.append(hexDigits[(aByte & 0xf0) >> 4]);
            buf.append(hexDigits[aByte & 0x0f]);
        }

        return buf.toString();
    }

    public JSONObject getJsonHeaderObject() {
        return jsonHeaderObject;
    }

    public JSONObject getJsonClaimObject() {
        return jsonClaimObject;
    }

    public static void main(String[] args){

        // sample JWT from WSO2IS

        String jwtToken = "eyJraWQiOiJvRjBMY3NjWlpBWXlyb0h2b0VJczZPWll4T1RlRkdYcFZPU3Q5TlJESXV3PSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1YmM4OWNlZS05MDM0LTRlYjEtYWM1Yi1lMDQyMzUzZWRmZTEiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tXC91cy1lYXN0LTFfQzhHREQ4VE5nIiwicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjp0cnVlLCJjb2duaXRvOnVzZXJuYW1lIjoiYWRtaW4iLCJhdWQiOiI0aDZsdHBocGJkNmprYmRkbmZrajV2OGFscCIsImV2ZW50X2lkIjoiZTg5NmUxOTAtYmFmYi0xMWU4LTg5MDgtNWIzZDM1Y2U4YmU3IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE1MzcyNDUxNzMsInBob25lX251bWJlciI6Iis5MTk4MzE1ODM3NzQiLCJleHAiOjE1MzcyNzE5NjgsImlhdCI6MTUzNzI2ODM2OCwiZW1haWwiOiJhZG1pbkBhdmFuemFyaXQuaW4ifQ.P4dHjJBItebaK-Xt5LmoZlLxXtqDX_rbvC7sqXHSoM_KJ9qJE08_-djraev1UH8ARm2022sbTuHilXqZ6RHfwpm3Q_-1U3Q1jCg8ohrWdTTr4XTBxWyUACm6iQlh5TrosVQEfvhbPFgJJPSUcOokvJmb6XXbp29dPq6451qlvIyN1pohYya_HqyJiBT9RNOw9MK9UgEojOB2hbNXZRxhtQGLSUsKf872O9nh9_40WtANY8JloMdlEA-CpFvfbbuUQWo1QeQyGAYvXQxRM8jVyolYzZoFbsrAvDSTlhX26aY-ZEvdyPzEjz03gyUEINvhWJP-WhaHDxzksBcdXkYEZg";

        SimpleJWTProcessor processor = new SimpleJWTProcessor(jwtToken);

        if(processor.isValid()){
            JSONObject body = processor.getJsonClaimObject();

            // retrieve claims
            String email = (String) body.get("http://wso2.org/claims/emailaddress");

            System.out.println("Email : " + email);
        } else {
            System.err.println("Signature verification failed.");
        }

    }
}
